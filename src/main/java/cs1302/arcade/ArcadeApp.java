package cs1302.arcade;

import java.util.Random;

import javafx.application.Application;
import javafx.application.Platform;
import javafx.geometry.Pos;
import javafx.scene.Group;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.image.Image;
import javafx.scene.image.ImageView;
import javafx.scene.shape.Rectangle;
import javafx.stage.Stage;
import javafx.event.EventHandler;
import javafx.scene.input.KeyEvent;
import javafx.scene.input.KeyCode;
import javafx.scene.input.MouseEvent;
import javafx.scene.layout.StackPane;
import javafx.scene.layout.HBox;
import javafx.scene.layout.VBox;
import javafx.scene.paint.Color;


/**
 * Application subclass for {@code ArcadeApp}.
 * @version 2019.fa
 */
public class ArcadeApp extends Application {

    StackPane[][] stackpane = new StackPane[8][8];
    HBox[] hbox = new HBox[8];
    VBox vbox = new VBox();
    Group group = new Group();           // main container
    Random rng = new Random();           // random number generator
    Rectangle r = new Rectangle(50, 50); // some rectangle
    Rectangle r2 = new Rectangle(50, 50);
    Rectangle[][] rectangles = new Rectangle[8][8];

    Image pawnW = new Image("file:resources/Chess_plt45.svg.png", 50, 50, true, true);
    Image knightW = new Image("file:resources/Chess_nlt45.svg.png", 50, 50, true, true);
    Image bishopW = new Image("file:resources/Chess_blt45.svg.png", 50, 50, true, true);
    Image rookW = new Image("file:resources/Chess_rlt45.svg.png", 50, 50, true, true);
    Image queenW = new Image("file:resources/Chess_qlt45.svg.png", 50, 50, true, true);
    Image kingW = new Image("file:resources/Chess_klt45.svg.png", 50, 50, true, true);

    Image pawnB = new Image("file:resources/Chess_pdt45.svg.png", 50, 50, true, true);
    Image knightB = new Image("file:resources/Chess_ndt45.svg.png", 50, 50, true, true);
    Image bishopB = new Image("file:resources/Chess_bdt45.svg.png", 50, 50, true, true);
    Image rookB = new Image("file:resources/Chess_rdt45.svg.png", 50, 50, true, true);
    Image queenB = new Image("file:resources/Chess_qdt45.svg.png", 50, 50, true, true);
    Image kingB = new Image("file:resources/Chess_kdt45.svg.png", 50, 50, true, true);

    ImageView imageview = new ImageView(knightW);
    ImageView[][] pieces = new ImageView[8][8];

    String coordinates = "";
    boolean pieceClicked = false;
    boolean legalMove = false;

    // Non-GUI related objects
    ChessGame game = new ChessGame();
    ChessBoard board = game.getBoard();

    /**
     * Return a mouse event handler that moves to the rectangle to a random
     * position any time a mouse event is generated by the associated node.
     * @return the mouse event handler
     */
    private EventHandler<? super MouseEvent> createMouseHandler() {
        return event -> {
            System.out.println(event);
            r.setX(rng.nextDouble() * (640 - r.getWidth()));
            r.setY(rng.nextDouble() * (480 - r.getHeight()));
        };
    } // createMouseHandler

    private EventHandler<? super MouseEvent> registerClick(int x, int y) {
        return event -> {
            System.out.print(x + " " + y);
            System.out.print(pieceClicked);
            if ((pieceClicked == false)) {
                coordinates = coordinates + x + " " + y + " ";
                pieceClicked = true;
            } else if ((pieceClicked == true)) {
                System.out.println("DONT EXECUTE");
                coordinates = coordinates + x + " " + y;
                game.promptUser(coordinates);
                Platform.runLater(() -> updateBoard());
                coordinates = "";
                pieceClicked = false;
            }
            System.out.println("COOR" + coordinates);
            //      game.promptUser(x, y);

            //    Platform.runLater(() -> updateBoard());
            // call a move method?
        };
    } // registerClick


    /**
     * Return a key event handler that moves to the rectangle to the left
     * or the right depending on what key event is generated by the associated
     * node.
     * @return the key event handler
     */
    private EventHandler<? super KeyEvent> createKeyHandler() {
        return event -> {
            System.out.println(event);
            switch (event.getCode()) {
                case LEFT:  // KeyCode.LEFT
                    r.setX(r.getX() - 10.0);
                    break;
                case RIGHT: // KeyCode.RIGHT
                    r.setX(r.getX() + 10.0);
                    break;
                default:
                    // do nothing
            } // switch
            // TODO bounds checking
        };
    } // createKeyHandler

    /** {@inheritDoc} */
    @Override
    public void start(Stage stage) {

        /* You are allowed to rewrite this start method, add other methods,
         * files, classes, etc., as needed. This currently contains some
         * simple sample code for mouse and keyboard interactions with a node
         * (rectangle) in a group.
         */

        for (int i = 0; i < 8; i++) {
            hbox[i] = new HBox();
            for (int j = 0; j < 8; j++) {
                rectangles[i][j] = new Rectangle(50, 50);
                stackpane[i][j] = new StackPane();
                if (i % 2 == 0) {
                    if ((j % 2 == 0)) {
                        rectangles[i][j].setFill(Color.WHEAT);
                    } else {
                        rectangles[i][j].setFill(Color.SIENNA);
                    }
                } else {
                    if ((j % 2 != 0)) {
                        rectangles[i][j].setFill(Color.WHEAT);
                    } else {
                        rectangles[i][j].setFill(Color.SIENNA);
                    }
                }
                if (board.getPiece(i, j) != null) {
                    if (board.getPiece(i, j).getWhite() == true) {
                        if (board.getPiece(i, j) instanceof Pawn) {
                            stackpane[i][j].getChildren().addAll(rectangles[i][j], new ImageView(pawnW));
                        } else if (board.getPiece(i, j) instanceof Bishop) {
                            stackpane[i][j].getChildren().addAll(rectangles[i][j], new ImageView(bishopW));
                        } else if (board.getPiece(i, j) instanceof Knight) {
                            stackpane[i][j].getChildren().addAll(rectangles[i][j], new ImageView(knightW));
                        } else if (board.getPiece(i, j) instanceof Rook) {
                            stackpane[i][j].getChildren().addAll(rectangles[i][j], new ImageView(rookW));
                        } else if (board.getPiece(i, j) instanceof Queen) {
                            stackpane[i][j].getChildren().addAll(rectangles[i][j], new ImageView(queenW));
                        } else if (board.getPiece(i, j) instanceof King) {
                            stackpane[i][j].getChildren().addAll(rectangles[i][j], new ImageView(kingW));
                        }
                    } else {
                        if (board.getPiece(i, j) instanceof Pawn) {
                            stackpane[i][j].getChildren().addAll(rectangles[i][j], new ImageView(pawnB));
                        } else if (board.getPiece(i, j) instanceof Bishop) {
                            stackpane[i][j].getChildren().addAll(rectangles[i][j], new ImageView(bishopB));
                        } else if (board.getPiece(i, j) instanceof Knight) {
                            stackpane[i][j].getChildren().addAll(rectangles[i][j], new ImageView(knightB));
                        } else if (board.getPiece(i, j) instanceof Rook) {
                            stackpane[i][j].getChildren().addAll(rectangles[i][j], new ImageView(rookB));
                        } else if (board.getPiece(i, j) instanceof Queen) {
                            stackpane[i][j].getChildren().addAll(rectangles[i][j], new ImageView(queenB));
                        } else if (board.getPiece(i, j) instanceof King) {
                            stackpane[i][j].getChildren().addAll(rectangles[i][j], new ImageView(kingB));
                        }
                    }

                } else {
                    stackpane[i][j].getChildren().add(rectangles[i][j]);
                }

                hbox[i].getChildren().add(stackpane[i][j]);
            }
        } // for

        for (int i = 0; i < 8; i++) {
            for (int j = 0; j < 8; j++) {
                stackpane[i][j].setOnMouseClicked(registerClick(i, j));
            }
        }
        r.setOnMouseClicked(createMouseHandler()); // clicks on the rectangle move it randomly

        for (int i = 0; i < 8; i++) {
            vbox.getChildren().add(hbox[i]);
        }
        Scene scene = new Scene(vbox, 600, 480);

        // Title
        VBox titleVbox = new VBox();
        Button newGame = new Button("New Game");
        Button exit = new Button("Exit");

        titleVbox.getChildren().addAll(newGame, exit);
        titleVbox.setAlignment(Pos.CENTER);
        Scene title = new Scene(titleVbox, 300, 400);
        stage.setScene(title);


        stage.setTitle("cs1302-arcade!");
        //   stage.setScene(scene);
        stage.sizeToScene();
        stage.show();

        // Title buttons
        newGame.setOnAction(event -> stage.setScene(scene));
        exit.setOnAction(event -> System.exit(0));
        // the group must request input focus to receive key events
        // @see https://docs.oracle.com/javase/8/javafx/api/javafx/scene/Node.html#requestFocus--
        group.requestFocus();

    } // start

    public void updateBoard() {

        for (int i = 0; i < 8; i++) {
            hbox[i].getChildren().clear();
        } // for

        for (int i = 0; i < 8; i++) {
            hbox[i] = new HBox();
            for (int j = 0; j < 8; j++) {
                rectangles[i][j] = new Rectangle(50, 50);
                stackpane[i][j] = new StackPane();
                if (i % 2 == 0) {
                    if ((j % 2 == 0)) {
                        rectangles[i][j].setFill(Color.WHEAT);
                    } else {
                        rectangles[i][j].setFill(Color.SIENNA);
                    }
                } else {
                    if ((j % 2 != 0)) {
                        rectangles[i][j].setFill(Color.WHEAT);
                    } else {
                        rectangles[i][j].setFill(Color.SIENNA);
                    }
                }
                if (board.getPiece(i, j) != null) {
                    if (board.getPiece(i, j).getWhite() == true) {
                        if (board.getPiece(i, j) instanceof Pawn) {
                            stackpane[i][j].getChildren().addAll(rectangles[i][j], new ImageView(pawnW));
                        } else if (board.getPiece(i, j) instanceof Bishop) {
                            stackpane[i][j].getChildren().addAll(rectangles[i][j], new ImageView(bishopW));
                        } else if (board.getPiece(i, j) instanceof Knight) {
                            stackpane[i][j].getChildren().addAll(rectangles[i][j], new ImageView(knightW));
                        } else if (board.getPiece(i, j) instanceof Rook) {
                            stackpane[i][j].getChildren().addAll(rectangles[i][j], new ImageView(rookW));
                        } else if (board.getPiece(i, j) instanceof Queen) {
                            stackpane[i][j].getChildren().addAll(rectangles[i][j], new ImageView(queenW));
                        } else if (board.getPiece(i, j) instanceof King) {
                            stackpane[i][j].getChildren().addAll(rectangles[i][j], new ImageView(kingW));
                        }
                    } else {
                        if (board.getPiece(i, j) instanceof Pawn) {
                            stackpane[i][j].getChildren().addAll(rectangles[i][j], new ImageView(pawnB));
                        } else if (board.getPiece(i, j) instanceof Bishop) {
                            stackpane[i][j].getChildren().addAll(rectangles[i][j], new ImageView(bishopB));
                        } else if (board.getPiece(i, j) instanceof Knight) {
                            stackpane[i][j].getChildren().addAll(rectangles[i][j], new ImageView(knightB));
                        } else if (board.getPiece(i, j) instanceof Rook) {
                            stackpane[i][j].getChildren().addAll(rectangles[i][j], new ImageView(rookB));
                        } else if (board.getPiece(i, j) instanceof Queen) {
                            stackpane[i][j].getChildren().addAll(rectangles[i][j], new ImageView(queenB));
                        } else if (board.getPiece(i, j) instanceof King) {
                            stackpane[i][j].getChildren().addAll(rectangles[i][j], new ImageView(kingB));
                        }
                    }
                } else {
                    stackpane[i][j].getChildren().add(rectangles[i][j]);
                }
                hbox[i].getChildren().add(stackpane[i][j]);
            }
        } // for

        for (int i = 0; i < 8; i++) {
            for (int j = 0; j < 8; j++) {
                stackpane[i][j].setOnMouseClicked(registerClick(i, j));
            }
        }
        for (int i = 0; i < 8; i++) {
            vbox.getChildren().add(hbox[i]);
        }
    } // updateBoard


} // ArcadeApp
