package cs1302.arcade;

import java.util.Random;

import java.util.Scanner;
import javafx.animation.PathTransition;
import javafx.application.Application;
import javafx.application.Platform;
import javafx.event.ActionEvent;
import javafx.geometry.Insets;
import javafx.geometry.Pos;
import javafx.scene.Group;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.control.MenuButton;
import javafx.scene.control.MenuItem;
import javafx.scene.image.Image;
import javafx.scene.image.ImageView;
import javafx.scene.layout.*;
import javafx.scene.shape.LineTo;
import javafx.scene.shape.MoveTo;
import javafx.scene.shape.Path;
import javafx.scene.shape.Rectangle;
import javafx.scene.text.Font;
import javafx.scene.text.FontPosture;
import javafx.scene.text.FontWeight;
import javafx.scene.text.Text;
import javafx.stage.Modality;
import javafx.stage.Stage;
import javafx.event.EventHandler;
import javafx.scene.input.KeyEvent;
import javafx.scene.input.KeyCode;
import javafx.scene.input.MouseEvent;
import javafx.scene.paint.Color;
import javafx.util.Duration;


/**
 * Application subclass for {@code ArcadeApp}.
 * @version 2019.fa
 */
public class ArcadeApp extends Application {

    StackPane[][] stackpane = new StackPane[8][8];
    HBox[] hbox = new HBox[8];
    VBox vbox = new VBox();
    Group group = new Group();           // main container
    Random rng = new Random();           // random number generator
    Rectangle r = new Rectangle(50, 50); // some rectangle
    Rectangle r2 = new Rectangle(50, 50);
    Rectangle[][] rectangles = new Rectangle[8][8];

    Image pawnW = new Image("file:resources/Chess_plt45.svg.png", 50, 50, true, true);
    Image knightW = new Image("file:resources/Chess_nlt45.svg.png", 50, 50, true, true);
    Image bishopW = new Image("file:resources/Chess_blt45.svg.png", 50, 50, true, true);
    Image rookW = new Image("file:resources/Chess_rlt45.svg.png", 50, 50, true, true);
    Image queenW = new Image("file:resources/Chess_qlt45.svg.png", 50, 50, true, true);
    Image kingW = new Image("file:resources/Chess_klt45.svg.png", 50, 50, true, true);

    Image pawnB = new Image("file:resources/Chess_pdt45.svg.png", 50, 50, true, true);
    Image knightB = new Image("file:resources/Chess_ndt45.svg.png", 50, 50, true, true);
    Image bishopB = new Image("file:resources/Chess_bdt45.svg.png", 50, 50, true, true);
    Image rookB = new Image("file:resources/Chess_rdt45.svg.png", 50, 50, true, true);
    Image queenB = new Image("file:resources/Chess_qdt45.svg.png", 50, 50, true, true);
    Image kingB = new Image("file:resources/Chess_kdt45.svg.png", 50, 50, true, true);

    ImageView imageview = new ImageView(knightW);
    ImageView[][] pieces = new ImageView[8][8];

    String coordinates = "";
    boolean pieceClicked = false;

    // Non-GUI related objects
    ChessGame game = new ChessGame();
    ChessBoard board = game.getBoard();

    // Title Screen objects
    Image letterC = new Image("file:resources/letterC.png", 50, 50, true, true);
    Image letterH = new Image("file:resources/letterH.png", 50, 50, true, true);
    Image letterE = new Image("file:resources/letterE.png", 50, 50, true, true);
    Image letterS = new Image("file:resources/letterS.png", 50, 50, true, true);

    ImageView cView = new ImageView(letterC);
    ImageView hView = new ImageView(letterH);
    ImageView eView = new ImageView(letterE);
    ImageView sView1 = new ImageView(letterS);
    ImageView sView2 = new ImageView(letterS);

    Path path1 = new Path();
    Path path2 = new Path();

    Path[] paths = new Path[5];
    MoveTo[] moveTos = new MoveTo[5];
    LineTo[] lineTos = new LineTo[5];
    PathTransition[] pathTransitions = new PathTransition[5];

    int defaultX = 50;
    int tempY1 = 75;
    int tempY2 = 100;

    /**
     * Return a mouse event handler that moves to the rectangle to a random
     * position any time a mouse event is generated by the associated node.
     * @return the mouse event handler
     */
    private EventHandler<? super MouseEvent> createMouseHandler() {
        return event -> {
            System.out.println(event);
            r.setX(rng.nextDouble() * (640 - r.getWidth()));
            r.setY(rng.nextDouble() * (480 - r.getHeight()));
        };
    } // createMouseHandler

    private EventHandler<? super MouseEvent> registerClick(int x, int y) {
        return event -> {
            System.out.print(x + " " + y);
            System.out.print(pieceClicked);
            if ((pieceClicked == false)) {
                System.out.println(validClick(x, y));
                if (validClick(x, y) == true) {
                    coordinates = coordinates + x + " " + y + " ";
                    pieceClicked = true;
                }
             //   Platform.runLater(() -> updateBoard());
            } else if ((pieceClicked == true)) {
                coordinates = coordinates + x + " " + y;
                game.promptUser(coordinates);
              //  Platform.runLater(() -> updateBoard());
            //    Platform.runLater(() -> game.getInCheck());
                coordinates = "";
                pieceClicked = false;
            }
            Platform.runLater(() -> updateBoard());
            System.out.println("COOR" + coordinates);
            if (game.getInCheck() == true) {
                while (true)
                System.out.println("NOTHING");
            }
        };
    } // registerClick


    /**
     * Return a key event handler that moves to the rectangle to the left
     * or the right depending on what key event is generated by the associated
     * node.
     * @return the key event handler
     */
    private EventHandler<? super KeyEvent> createKeyHandler() {
        return event -> {
            System.out.println(event);
            switch (event.getCode()) {
                case LEFT:  // KeyCode.LEFT
                    r.setX(r.getX() - 10.0);
                    break;
                case RIGHT: // KeyCode.RIGHT
                    r.setX(r.getX() + 10.0);
                    break;
                default:
                    // do nothing
            } // switch
            // TODO bounds checking
        };
    } // createKeyHandler

    /** {@inheritDoc} */
    @Override
    public void start(Stage stage) {

        /* You are allowed to rewrite this start method, add other methods,
         * files, classes, etc., as needed. This currently contains some
         * simple sample code for mouse and keyboard interactions with a node
         * (rectangle) in a group.
         */
        MenuButton menu = new MenuButton("Menu");
        MenuItem returnToTitle = new MenuItem("Return to Title");
        MenuItem reset = new MenuItem("Reset Game");
        MenuItem close = new MenuItem("Exit Application");


        vbox.getChildren().add(menu);

        for (int i = 0; i < 8; i++) {
            hbox[i] = new HBox();
            for (int j = 0; j < 8; j++) {
                rectangles[i][j] = new Rectangle(50, 50);
                stackpane[i][j] = new StackPane();
                if (i % 2 == 0) {
                    if ((j % 2 == 0)) {
                        rectangles[i][j].setFill(Color.WHEAT);
                    } else {
                        rectangles[i][j].setFill(Color.SIENNA);
                    }
                } else {
                    if ((j % 2 != 0)) {
                        rectangles[i][j].setFill(Color.WHEAT);
                    } else {
                        rectangles[i][j].setFill(Color.SIENNA);
                    }
                }
                if (board.getPiece(i, j) != null) {
                    if (board.getPiece(i, j).getWhite() == true) {
                        if (board.getPiece(i, j) instanceof Pawn) {
                            stackpane[i][j].getChildren().addAll(rectangles[i][j], new ImageView(pawnW));
                        } else if (board.getPiece(i, j) instanceof Bishop) {
                            stackpane[i][j].getChildren().addAll(rectangles[i][j], new ImageView(bishopW));
                        } else if (board.getPiece(i, j) instanceof Knight) {
                            stackpane[i][j].getChildren().addAll(rectangles[i][j], new ImageView(knightW));
                        } else if (board.getPiece(i, j) instanceof Rook) {
                            stackpane[i][j].getChildren().addAll(rectangles[i][j], new ImageView(rookW));
                        } else if (board.getPiece(i, j) instanceof Queen) {
                            stackpane[i][j].getChildren().addAll(rectangles[i][j], new ImageView(queenW));
                        } else if (board.getPiece(i, j) instanceof King) {
                            stackpane[i][j].getChildren().addAll(rectangles[i][j], new ImageView(kingW));
                        }
                    } else {
                        if (board.getPiece(i, j) instanceof Pawn) {
                            stackpane[i][j].getChildren().addAll(rectangles[i][j], new ImageView(pawnB));
                        } else if (board.getPiece(i, j) instanceof Bishop) {
                            stackpane[i][j].getChildren().addAll(rectangles[i][j], new ImageView(bishopB));
                        } else if (board.getPiece(i, j) instanceof Knight) {
                            stackpane[i][j].getChildren().addAll(rectangles[i][j], new ImageView(knightB));
                        } else if (board.getPiece(i, j) instanceof Rook) {
                            stackpane[i][j].getChildren().addAll(rectangles[i][j], new ImageView(rookB));
                        } else if (board.getPiece(i, j) instanceof Queen) {
                            stackpane[i][j].getChildren().addAll(rectangles[i][j], new ImageView(queenB));
                        } else if (board.getPiece(i, j) instanceof King) {
                            stackpane[i][j].getChildren().addAll(rectangles[i][j], new ImageView(kingB));
                        }
                    }

                } else {
                    stackpane[i][j].getChildren().add(rectangles[i][j]);
                }

                hbox[i].getChildren().add(stackpane[i][j]);
            }
        } // for

        for (int i = 0; i < 8; i++) {
            for (int j = 0; j < 8; j++) {
                stackpane[i][j].setOnMouseClicked(registerClick(i, j));
            }
        }
        r.setOnMouseClicked(createMouseHandler()); // clicks on the rectangle move it randomly

        for (int i = 0; i < 8; i++) {
            vbox.getChildren().add(hbox[i]);
        }
        Scene scene = new Scene(vbox, 600, 480);

        // Title
        VBox boxes = new VBox();
   //     Group boxes = new Group();
        HBox titleVbox = new HBox();
        VBox buttonBox = new VBox();
    //    Group textBox = new Group();
        for (int i = 0; i < 5; i++) {
            paths[i] = new Path();
            moveTos[i] = new MoveTo(defaultX, tempY1);
            lineTos[i] = new LineTo(defaultX, tempY2);
            paths[i].getElements().addAll(moveTos[i], lineTos[i]);

            pathTransitions[i] = new PathTransition();
            pathTransitions[i].setDuration(Duration.millis(1000));
            //       pathTransitions[i].setNode(cView);
            if (i == 0) {
                pathTransitions[i].setNode(cView);
                tempY1 = 100;
                tempY2 = 75;
            } else if (i == 1) {
                pathTransitions[i].setNode(hView);
                tempY1 = 75;
                tempY2 = 100;
            } else if (i == 2) {
                pathTransitions[i].setNode(eView);
                tempY1 = 100;
                tempY2 = 75;
            } else if (i == 3) {
                pathTransitions[i].setNode(sView1);
                tempY1 = 75;
                tempY2 = 100;
            } else if (i == 4) {
                pathTransitions[i].setNode(sView2);
            }
            pathTransitions[i].setPath(paths[i]);
            pathTransitions[i].setCycleCount(Integer.MAX_VALUE);
            pathTransitions[i].setAutoReverse(true);
            pathTransitions[i].play();
            defaultX = defaultX;
        }

        Text name = new Text("By: Matthew Tzou");
        Button playGame = new Button("Play");
        Button help = new Button("Help");
        Button exit = new Button("Exit");
        playGame.setMinWidth(100);
        help.setMinWidth(100);
        exit.setMinWidth(100);

        name.setFont(Font.font("rockwell", FontWeight.BOLD, FontPosture.REGULAR, 20));



        titleVbox.getChildren().addAll(cView, hView, eView, sView1, sView2);
        buttonBox.getChildren().addAll(name, playGame, help, exit);
        buttonBox.setAlignment(Pos.CENTER);
        buttonBox.setTranslateY(150);
        boxes.getChildren().addAll(titleVbox, buttonBox);
        boxes.setBackground(new Background(new BackgroundFill(Color.WHITE, CornerRadii.EMPTY, Insets.EMPTY)));
        Scene title = new Scene(boxes, 300, 400);
        stage.setScene(title);


        stage.setTitle("cs1302-arcade!");
        //   stage.setScene(scene);
        stage.sizeToScene();
        stage.show();

        // Title buttons
        playGame.setOnAction(event -> stage.setScene(scene));
        exit.setOnAction(event -> System.exit(0));

        returnToTitle.setOnAction(event -> stage.setScene(title));
        reset.setOnAction(event -> {
            game.newBoard();
            board = game.getBoard();
            updateBoard();
        });
        close.setOnAction(event -> System.exit(0));
        menu.getItems().addAll(returnToTitle, reset, close);

        try {
            runNow(() -> game.checkStatus());
        } catch (InterruptedException ie) {
            System.out.println("INTERRUPTED EXCEPTION");
        }

        // the group must request input focus to receive key events
        // @see https://docs.oracle.com/javase/8/javafx/api/javafx/scene/Node.html#requestFocus--
        group.requestFocus();

        help.setOnAction(event -> {
            final Stage dialog = new Stage();
            VBox dialogVbox = new VBox(10);
            dialogVbox.getChildren().add(new Text("Welcome to Matthew Tzou's JavaFX chess! This chess \ngame" +
                    " is operated via click commands and follows \nconventional chess gameplay rules. Start a game" +
                    "\nwhenever you are ready!"));
            Scene dialogScene = new Scene(dialogVbox, 350, 250);
            dialog.setScene(dialogScene);
            dialog.show();

        });


    } // start

    public void updateBoard() {

        for (int i = 0; i < 8; i++) {
            hbox[i].getChildren().clear();
        } // for

        for (int i = 0; i < 8; i++) {
            hbox[i] = new HBox();
            for (int j = 0; j < 8; j++) {
                rectangles[i][j] = new Rectangle(50, 50);
                stackpane[i][j] = new StackPane();
                if (i % 2 == 0) {
                    if ((j % 2 == 0)) {
                        rectangles[i][j].setFill(Color.WHEAT);
                    } else {
                        rectangles[i][j].setFill(Color.SIENNA);
                    }
                } else {
                    if ((j % 2 != 0)) {
                        rectangles[i][j].setFill(Color.WHEAT);
                    } else {
                        rectangles[i][j].setFill(Color.SIENNA);
                    }
                }
                if (pieceClicked == true) {
                    Scanner coordinateScanner = new Scanner(coordinates);
                    int x = coordinateScanner.nextInt();
                    int y = coordinateScanner.nextInt();
                    rectangles[x][y].setFill(Color.LIMEGREEN);
                    coordinateScanner.close();
                }
                if (board.getPiece(i, j) != null) {
                    if (board.getPiece(i, j).getWhite() == true) {
                        if (board.getPiece(i, j) instanceof Pawn) {
                            stackpane[i][j].getChildren().addAll(rectangles[i][j], new ImageView(pawnW));
                        } else if (board.getPiece(i, j) instanceof Bishop) {
                            stackpane[i][j].getChildren().addAll(rectangles[i][j], new ImageView(bishopW));
                        } else if (board.getPiece(i, j) instanceof Knight) {
                            stackpane[i][j].getChildren().addAll(rectangles[i][j], new ImageView(knightW));
                        } else if (board.getPiece(i, j) instanceof Rook) {
                            stackpane[i][j].getChildren().addAll(rectangles[i][j], new ImageView(rookW));
                        } else if (board.getPiece(i, j) instanceof Queen) {
                            stackpane[i][j].getChildren().addAll(rectangles[i][j], new ImageView(queenW));
                        } else if (board.getPiece(i, j) instanceof King) {
                            stackpane[i][j].getChildren().addAll(rectangles[i][j], new ImageView(kingW));
                        }
                    } else {
                        if (board.getPiece(i, j) instanceof Pawn) {
                            stackpane[i][j].getChildren().addAll(rectangles[i][j], new ImageView(pawnB));
                        } else if (board.getPiece(i, j) instanceof Bishop) {
                            stackpane[i][j].getChildren().addAll(rectangles[i][j], new ImageView(bishopB));
                        } else if (board.getPiece(i, j) instanceof Knight) {
                            stackpane[i][j].getChildren().addAll(rectangles[i][j], new ImageView(knightB));
                        } else if (board.getPiece(i, j) instanceof Rook) {
                            stackpane[i][j].getChildren().addAll(rectangles[i][j], new ImageView(rookB));
                        } else if (board.getPiece(i, j) instanceof Queen) {
                            stackpane[i][j].getChildren().addAll(rectangles[i][j], new ImageView(queenB));
                        } else if (board.getPiece(i, j) instanceof King) {
                            stackpane[i][j].getChildren().addAll(rectangles[i][j], new ImageView(kingB));
                        }
                    }
                } else {
                    stackpane[i][j].getChildren().add(rectangles[i][j]);
                }
                hbox[i].getChildren().add(stackpane[i][j]);
            }
        } // for

        for (int i = 0; i < 8; i++) {
            for (int j = 0; j < 8; j++) {
                stackpane[i][j].setOnMouseClicked(registerClick(i, j));
            }
        }
        for (int i = 0; i < 8; i++) {
            vbox.getChildren().add(hbox[i]);
        }
    } // updateBoard

    /**
     * Method that allows for the creation of a new {@code Thread} to operate multiple parts of the
     * code simultaneously.
     *
     * @param runnable an object that implements {@code Runnable} or is runnable
     */
    private static void runNow(Runnable runnable) throws InterruptedException {
        Thread t = new Thread(runnable);
        t.setDaemon(true);
        t.start();
    } // runNow

    public boolean validClick(int x, int y) {
        if (board.getPiece(x, y) != null) {
            if ((game.getWhiteTurn() == true) && (board.getPiece(x, y).getWhite() == true)) {
                return true;
            } else if ((game.getWhiteTurn() == false) && (board.getPiece(x, y).getWhite() == false)) {
                return true;
            } else {
                return false;
            }
        } else {
            return false;
        }
    } // validClick
} // ArcadeApp
